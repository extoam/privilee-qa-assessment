{
	"info": {
		"_postman_id": "e3156e13-a8e1-457a-986b-e0a00ef3b05c",
		"name": "Privilee_API_Test_Assessment",
		"description": "Automated tests to validate [dummyapi.online](https://dummyapi.online/) endpoints:\n\n- GET /api/movies\n    \n- GET /api/blogposts\n    \n- GET /api/users\n    \n- GET /api/pokemon\n    \n- GET /api/products\n    \n\nThe following API tests have been implemented to validate the accuracy and integrity of API requests effectively:\n\n- _**Response structure and data types validation**_\n    \n- _**Response code and response time validation**_\n    \n- _**Response header validation**_\n    \n- _**Assertions against defined variables for response data validation**_\n    \n- _**Validation against \"Not Null\"/\"Empty string\" values in response data**_\n    \n- _**Verification of the number of JSON objects in response**_",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1431873"
	},
	"item": [
		{
			"name": "Get Movies Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//TESTS",
							"",
							"// 1. Verify Response status code",
							"pm.test(\"1. Check if Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Verify Response time",
							"pm.test(\"2. Check if Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//3. Verify response header value",
							"pm.test(\"3. Check if Content-Type header has application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"//4. Verify response schema",
							"pm.test(\"4. Validate the response schema for id, movie, rating, image, and imdb_url\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(movie) {",
							"        pm.expect(movie).to.have.property('id').that.is.a('number');",
							"        pm.expect(movie).to.have.property('movie').that.is.a('string');",
							"        pm.expect(movie).to.have.property('rating').that.is.a('number');",
							"        pm.expect(movie).to.have.property('image').that.is.a('string');",
							"        pm.expect(movie).to.have.property('imdb_url').that.is.a('string');",
							"    });",
							"});",
							"",
							"//5. Validate ID datatype",
							"pm.test(\"5. Check if Id is a non-negative integer\", function () {",
							"    var responseData = pm.response.json(); ",
							"    responseData.forEach(function(movie) {",
							"    pm.expect(movie.id).to.be.a('number').and.to.be.at.least(0);",
							"  });",
							"});",
							"",
							"//6. Validate 'Movie' field datatype",
							"pm.test(\"6. Check if Movie name has a non-empty string\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(movie) {",
							"    pm.expect(movie.movie).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Movie name should not be empty\");",
							"  });",
							"});",
							"",
							"//7. Verify Rating range",
							"pm.test(\"7. Check if Rating is within a valid range (0-10)\", function () {",
							"    var responseData = pm.response.json();",
							"    responseData.forEach(function(movie) {",
							"        pm.expect(movie.rating).to.be.a('number');",
							"        pm.expect(movie.rating).to.be.at.least(0);",
							"        pm.expect(movie.rating).to.be.at.most(10);",
							"    });",
							"});",
							"",
							"// 8.Verify that response data is not null",
							"pm.test(\"8. Ensure response data is not null\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.not.be.null;",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.id).to.not.be.null;",
							"        pm.expect(item.movie).to.not.be.null;",
							"        pm.expect(item.rating).to.not.be.null;",
							"        pm.expect(item.image).to.not.be.null;",
							"        pm.expect(item.imdb_url).to.not.be.null;",
							"    });",
							" }); ",
							"    ",
							"// 9. Validate specific values in the response",
							"pm.test(\"9. Find the movie with id 1 and check response data\", function () {",
							"    var responseData = pm.response.json();",
							"    let  movieName = pm.variables.get('movieName1');",
							"    let  movieRating = JSON.parse(pm.variables.get('movieRating1'));",
							"    let  movieImage = pm.variables.get('movieImage1');",
							"    let  movieImdb_url = pm.variables.get('movieImdb_url1');",
							"",
							"    let movie1 = responseData.find(movie => movie.id === 1);",
							"    pm.expect(movie1).to.have.property('movie', movieName);",
							"    pm.expect(movie1).to.have.property('rating', movieRating);",
							"    pm.expect(movie1).to.have.property('image', movieImage);",
							"    pm.expect(movie1).to.have.property('imdb_url', movieImdb_url);",
							"});",
							" ",
							"// 10. Validate specific values in the response",
							"pm.test(\"10. Find the movie with id 2 and check response data\", function () {",
							"    var responseData = pm.response.json();",
							"    let  movieName = pm.variables.get('movieName2');",
							"    let  movieRating = JSON.parse(pm.variables.get('movieRating2'));",
							"    let  movieImage = pm.variables.get('movieImage2');",
							"    let  movieImdb_url = pm.variables.get('movieImdb_url2');",
							"",
							"    let movie2 = responseData.find(movie => movie.id === 2);",
							"    pm.expect(movie2).to.have.property('movie', movieName);",
							"    pm.expect(movie2).to.have.property('rating', movieRating);",
							"    pm.expect(movie2).to.have.property('image', movieImage);",
							"    pm.expect(movie2).to.have.property('imdb_url', movieImdb_url);",
							"});",
							" ",
							"// 11. Validate specific values in the response",
							"pm.test(\"11. Find the movie with id 10 and check response data\", function () {",
							"    var responseData = pm.response.json();",
							"    let  movieName = pm.variables.get('movieName10');",
							"    let  movieRating = JSON.parse(pm.variables.get('movieRating10'));",
							"    let  movieImage = pm.variables.get('movieImage10');",
							"    let  movieImdb_url = pm.variables.get('movieImdb_url10');",
							"",
							"    let movie10 = responseData.find(movie => movie.id === 10);",
							"    pm.expect(movie10).to.have.property('movie', movieName);",
							"    pm.expect(movie10).to.have.property('rating', movieRating);",
							"    pm.expect(movie10).to.have.property('image', movieImage);",
							"    pm.expect(movie10).to.have.property('imdb_url', movieImdb_url);",
							"});  ",
							"",
							"// 12. Check the number of JSON objects in the response",
							"pm.test(\"12. Check the length of the array\", function () {",
							"    var responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"",
							"    let expectedLength = 100; ",
							"    pm.expect(responseData.length).to.eql(expectedLength);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/movies",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Blog Posts Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//TESTS",
							"",
							"// 1. Verify Response status code",
							"pm.test(\"1. Check if Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Verify Response time",
							"pm.test(\"2. Check if Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//3. Verify response header value",
							"pm.test(\"3. Check if Content-Type header has application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"//4. Verify if Response contains the required fields ",
							"pm.test(\"4. Response contains the required fields - id, title, author, date_published, and content\", function () {",
							"    var responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(blogpost) {",
							"        pm.expect(blogpost).to.have.property('id');",
							"        pm.expect(blogpost).to.have.property('title');",
							"        pm.expect(blogpost).to.have.property('author');",
							"        pm.expect(blogpost).to.have.property('date_published');",
							"        pm.expect(blogpost).to.have.property('content');",
							"    });",
							"});",
							"",
							"//5. Check if Title is a non-empty string",
							"pm.test(\"5. Title is a non-empty string\", function () {",
							"  var responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(post) {",
							"    pm.expect(post.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");",
							"  });",
							"});",
							"",
							"//6. Check if Author is a non-empty string",
							"pm.test(\"6. Author is a non-empty string\", function () {",
							"  var responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(post) {",
							"    pm.expect(post.author).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Author should not be empty\");",
							"  });",
							"});",
							"",
							"// 7. Check if Content is a non-empty string",
							"pm.test(\"7. Content is a non-empty string\", function () {",
							"  var responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(blogpost) {",
							"    pm.expect(blogpost.content).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Content should not be empty\");",
							"  });",
							"});",
							"",
							"// 8. Validate specific values in the response",
							"pm.test(\"8. Find the Blog with id 1 and check response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    let  blogTitle = pm.variables.get('blogTitle1');",
							"    let  author_blog = pm.variables.get('author_blog1');",
							"    let  date_published = pm.variables.get('date_published_blog1');",
							"",
							"    let blog1 = jsonData.find(blog => blog.id === 1);",
							"    pm.expect(blog1).to.have.property('title', blogTitle);",
							"    pm.expect(blog1).to.have.property('author', author_blog);",
							"    pm.expect(blog1).to.have.property('date_published', date_published );",
							"});  ",
							"",
							"//9. Check the number of JSON objects in the response",
							"pm.test(\"9. Check the length of the array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"",
							"    let expectedLength = 50; ",
							"    pm.expect(jsonData.length).to.eql(expectedLength);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/blogposts",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"blogposts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Retrieve Users Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//TESTS",
							"",
							"// 1. Verify Response status code",
							"pm.test(\"1. Check if Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Verify Response time",
							"pm.test(\"2. Check if Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//3. Verify response header value",
							"pm.test(\"3. Check if Content-Type header has application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"//4. Verify if Response contains the required fields ",
							"pm.test(\"4. Check if Response contains the required fields - id, name, username, email, and address\", function () {",
							"    var responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(users) {",
							"        pm.expect(users).to.have.property('id');",
							"        pm.expect(users).to.have.property('name');",
							"        pm.expect(users).to.have.property('username');",
							"        pm.expect(users).to.have.property('email');",
							"        pm.expect(users).to.have.property('address');",
							"    });",
							"});",
							"",
							"//5. Check if Name is a non-empty string",
							"pm.test(\"5. Check if Name is a non-empty string\", function () {",
							"   var responseData = pm.response.json();",
							"  ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(users) {",
							"      pm.expect(users.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nmae should not be empty\");",
							"  });",
							"});",
							"",
							"//6. Check if username is a non-empty string",
							"pm.test(\"6. Check if Username is a non-empty string\", function () {",
							"    var responseData = pm.response.json();",
							"  ",
							"    responseData.forEach(function(users) {",
							"      pm.expect(users.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"  });",
							"});",
							"",
							"// 7. Check if email is a non-empty string",
							"pm.test(\"7. Check if email is a non-empty string\", function () {",
							"    var responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(users) {",
							"    pm.expect(users.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
							"  });",
							"});",
							"",
							"// 8. Validate specific values in the response",
							"pm.test(\"8. Find the User with id 1 and check response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    let  name = pm.variables.get('name_user1');",
							"    let  username = pm.variables.get('username1');",
							"    let  email = pm.variables.get('email_user1');",
							"   ",
							"    let user1 = jsonData.find(users => users.id === 1);",
							"    pm.expect(user1).to.have.property('name', name);",
							"    pm.expect(user1).to.have.property('username', username);",
							"    pm.expect(user1).to.have.property('email', email );",
							"    ",
							"});  ",
							"",
							"//9. Check the number of JSON objects in the response",
							"pm.test(\"9. Check the length of the array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"",
							"    let expectedLength = 30; ",
							"    pm.expect(jsonData.length).to.eql(expectedLength);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/users",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Pokemons Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//TESTS",
							"pm.test(\"1. Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"2. Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"pm.test(\"3. Validate the response schema for required fields\", function () {",
							"    var responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(pokemon => {",
							"        pm.expect(pokemon).to.have.property('id');",
							"        pm.expect(pokemon).to.have.property('pokemon');",
							"        pm.expect(pokemon).to.have.property('type');",
							"        pm.expect(pokemon).to.have.property('abilities');",
							"        pm.expect(pokemon).to.have.property('hitpoints');",
							"        pm.expect(pokemon).to.have.property('evolutions');",
							"        pm.expect(pokemon).to.have.property('location');",
							"        pm.expect(pokemon).to.have.property('image_url');",
							"    });",
							"});",
							"",
							"pm.test(\"4. Response Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"5. Abilities array contains at least one element for each pokemon\", function () {",
							"    var responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(pokemon => {",
							"        pm.expect(pokemon.abilities).to.be.an('array').that.is.not.empty;",
							"    });",
							"});",
							"",
							"pm.test(\"6. Hitpoints is a non-negative integer for each pokemon\", function () {",
							"    var responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(pokemon => {",
							"        pm.expect(pokemon.hitpoints).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"// 7. Validate specific values in the response",
							"pm.test(\"7. Find the pokemon with id 1 and check response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    let  pokemonName = pm.variables.get('pokemon1');",
							"    let  type = pm.variables.get('type_pokemon1');",
							"    ",
							"",
							"    let pokemon = jsonData.find(pokemon => pokemon.id === 1);",
							"    pm.expect(pokemon).to.have.property('pokemon', pokemonName);",
							"    pm.expect(pokemon).to.have.property('type', type);",
							"    ",
							"});  ",
							"// 8. Check Pokemon abilities and evolutions values",
							"pm.test('8. Check Pokemon abilities and evolutions values ', () => {",
							"    var jsonData = pm.response.json();",
							"    let  abilities = pm.variables.get('abilities_pokemon1');",
							"    let  evolutions = pm.variables.get('evolutions_pokemon1');",
							"",
							"    console.log(abilities);",
							"    let pokemon = jsonData.find(pokemon => pokemon.id === 1)",
							"    pm.expect(pokemon.abilities[0]).to.equal(abilities);",
							"    pm.expect(pokemon.evolutions[0]).to.equal(evolutions);    ",
							"});",
							"  ",
							"//9. Check the number of JSON objects in the response",
							"pm.test(\"9. Check the length of the array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"",
							"    let expectedLength = 50; ",
							"    pm.expect(jsonData.length).to.eql(expectedLength);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/pokemon",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"pokemon"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products Information",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//TESTS",
							"//1. Check Response status code is 200",
							"pm.test(\"1. Check Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2. Check Response time is less than 500ms",
							"pm.test(\"2. Check Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"//3. Response has the Content-Type header set to 'application/json",
							"pm.test(\"3. Check if Response has the Content-Type header set to 'application/json'\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"//4. Storage options array should not be empty\"",
							"pm.test(\"4. Check if Storage options array should not be empty\", function () {",
							"    var responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(product) {",
							"        pm.expect(product.storageOptions).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    });",
							"});",
							"",
							"//5. Color options array should not be empty",
							"pm.test(\"5. Check if Color options array should not be empty\", function () {",
							"  var responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  responseData.forEach(function(product) {",
							"    pm.expect(product.colorOptions).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Color options should not be empty\");",
							"  });",
							"});",
							"",
							"// 6. Validate specific values in the response",
							"pm.test(\"6. Find the Product with id 1 and check response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    let  name = pm.variables.get('productName1');",
							"    let  productCategory = pm.variables.get('productCategory1');",
							"    let brand = pm.variables.get('brand1');",
							"",
							"    var products = jsonData.find(products => products.id === 1);",
							"    pm.expect(products).to.have.property('name', name);",
							"    pm.expect(products).to.have.property('productCategory', productCategory);",
							"    pm.expect(products).to.have.property('brand', brand);",
							"    ",
							"    ",
							"    pm.expect(products.storageOptions[0]).to.equal('128GB');",
							"    pm.expect(products.storageOptions[1]).to.equal('256GB');  ",
							"    pm.expect(products.storageOptions[2]).to.equal('512GB');  ",
							"",
							"   pm.expect(products.camera.rearCamera).to.equal('Pro 12MP camera system: Ultra Wide, Wide, and Telephoto cameras');  ",
							"   pm.expect(products.camera.frontCamera).to.equal('12MP TrueDepth front camera');  ",
							"",
							"});  ",
							"",
							"",
							"// 6. Validate specific values in the response",
							"pm.test(\"6. Find the Product with id 2 and check response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    let  name = pm.variables.get('productName2');",
							"    let  productCategory = pm.variables.get('productCategory2');",
							"    let brand = pm.variables.get('brand1');",
							"",
							"    let products = jsonData.find(products => products.id === 2);",
							"    pm.expect(products).to.have.property('name', name);",
							"    pm.expect(products).to.have.property('productCategory', productCategory);",
							"    pm.expect(products).to.have.property('brand', brand);",
							"});  ",
							"",
							"//7. Check the number of JSON objects in the response",
							"pm.test(\"7. Check the length of the array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"",
							"    let expectedLength = 24; ",
							"    pm.expect(jsonData.length).to.eql(expectedLength);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/products",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		}
	]
}